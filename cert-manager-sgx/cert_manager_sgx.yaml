# Copyright  The cert-manager Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: (unknown)
  creationTimestamp: null
  name: hardwaresecuritymoduleconfigs.experimental.cert-manager.io
spec:
  group: experimental.cert-manager.io
  names:
    kind: HardwareSecurityModuleConfig
    listKind: HardwareSecurityModuleConfigList
    plural: hardwaresecuritymoduleconfigs
    singular: hardwaresecuritymoduleconfig
    shortNames:
      - hsmconfig
  scope: Namespaced
  versions:
    - name: v1alpha3
      schema:
        openAPIV3Schema:
          description: "A Certificate resource should be created to ensure an up to date and signed x509 certificate is stored in the Kubernetes Secret resource named in `spec.secretName`. \n The stored certificate will be renewed before it expires (as configured by `spec.renewBefore`)."
          type: object
          required:
            - spec
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: 'EDIT THIS FILE!  THIS IS SCAFFOLDING FOR YOU TO OWN! NOTE: json tags are required.  Any new fields you add must have json tags for the fields to be serialized.'
              type: object
              required:
                - pkcs11LibPath
                - pkcs11Pin
                - pkcs11Token
              properties:
                pkcs11LibPath:
                  type: string
                pkcs11Pin:
                  type: string
                pkcs11Token:
                  type: string
            status:
              description: HardwareSecurityModuleConfigStatus defines the observed state of HardwareSecurityModuleConfig
              type: object
              properties:
                lastUpdateTime:
                  type: string
                  format: date-time
                state:
                  type: string
      served: true
      storage: true
      subresources:
        status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: (unknown)
  creationTimestamp: null
  name: hardwaresecuritymodules.experimental.cert-manager.io
spec:
  group: experimental.cert-manager.io
  names:
    kind: HardwareSecurityModule
    listKind: HardwareSecurityModuleList
    plural: hardwaresecuritymodules
    singular: hardwaresecuritymodule
    shortNames:
      - hsm
  scope: Namespaced
  versions:
    - name: v1alpha3
      schema:
        openAPIV3Schema:
          description: "A Certificate resource should be created to ensure an up to date and signed x509 certificate is stored in the Kubernetes Secret resource named in `spec.secretName`. \n The stored certificate will be renewed before it expires (as configured by `spec.renewBefore`)."
          type: object
          required:
            - spec
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              type: object
              required:
                - issuers
              properties:
                issuers:
                  type: object
                  additionalProperties:
                    description: 'EDIT THIS FILE!  THIS IS SCAFFOLDING FOR YOU TO OWN! NOTE: json tags are required.  Any new fields you add must have json tags for the fields to be serialized.'
                    type: object
                    required:
                      - issuerType
                    properties:
                      issuerType:
                        type: string
                      privateKeyAlgorithm:
                        type: string
                      privateKeySize:
                        type: integer
            status:
              description: HardwareSecurityModuleStatus defines the observed state of HardwareSecurityModule
              type: object
              properties:
                lastUpdateTime:
                  description: lastUpdateTime is the time of the last update to this condition
                  type: string
                  format: date-time
                message:
                  type: array
                  items:
                    type: string
                state:
                  type: string
                type:
                  description: type of the condition for error. Known conditions are "Error", and "None".
                  type: string
      served: true
      storage: true
      subresources:
        status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: (unknown)
  creationTimestamp: null
  name: quoteattestations.experimental.cert-manager.io
spec:
  group: experimental.cert-manager.io
  names:
    kind: QuoteAttestation
    listKind: QuoteAttestationList
    plural: quoteattestations
    singular: quoteattestation
  scope: Namespaced
  versions:
    - name: v1alpha3
      schema:
        openAPIV3Schema:
          description: "A Certificate resource should be created to ensure an up to date and signed x509 certificate is stored in the Kubernetes Secret resource named in `spec.secretName`. \n The stored certificate will be renewed before it expires (as configured by `spec.renewBefore`). QuoteAttestation is the Schema for the quoteattestations API"
          type: object
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: QuoteAttestationSpec defines the desired state of QuoteAttestation
              type: object
              required:
                - publicKey
                - quote
                - serviceId
                - signerNames
              properties:
                publicKey:
                  description: PublicKey for encrypting the secret, hash is part of the quote data, base-64 encoded.
                  type: string
                  format: byte
                quote:
                  description: Quote to be verified, base64-encoded.
                  type: string
                  format: byte
                quoteVersion:
                  description: QuoteVersion used to for generated quote, default is ECDSA quote "3"
                  type: string
                serviceId:
                  description: // ServiceID holds the unique identifier(name?) that represents service which is requesting the secret. To be decided whether this should be a SPIFFE trust domain!
                  type: string
                signerNames:
                  description: Signers holds the signer names
                  type: array
                  items:
                    type: string
            status:
              description: QuoteAttestationStatus defines the observed state of QuoteAttestation
              type: object
              properties:
                condition:
                  description: conditions applied to the request. Known conditions are "Success", and "Failed".
                  type: object
                  properties:
                    lastUpdateTime:
                      description: lastUpdateTime is the time of the last update to this condition
                      type: string
                      format: date-time
                    message:
                      description: message contains a human readable message with details about the request state
                      type: string
                    state:
                      description: state indicates current request state
                      type: string
                    type:
                      description: "type of the condition. Known conditions are \"Success\", and \"Failed\". \n A \"Success\" indicating the attestation request was succeeded and the secret keys have been created. \n A \"Failed\" indicating the attestation request was failed for some reason, message holds the additional information about the failure."
                      type: string
                secrets:
                  description: Secret fetched after the request has been processed successfully
                  type: object
                  additionalProperties:
                    description: QuoteAttestationSecret defines the secret get from the Key Management Service
                    type: object
                    properties:
                      secretName:
                        description: SecretName represents name of the Secret object (in the same namespace) which contains the secret keys. Added only after a successful quote validation. The secret may contain several keys and other encrypted data.
                        type: string
                      secretType:
                        description: SecretType defines the internal structure of secret fetched from the Key Management Service, as there might be different formats accordingly.
                        type: string
      served: true
      storage: true
      subresources:
        status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
    labels:
        app: cert-manager
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: cert-manager
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: cert-manager
        helm.sh/chart: cert-manager-v1.4.2
    name: cert-manager-controller-hsm-qa
rules:
    - apiGroups:
        - cert-manager.io
      resources:
        - issuers
        - issuers/status
        - clusterissuers
        - clusterissuers/status
        - certificates
        - certificates/status
        - certificaterequests
        - certificaterequests/status
      verbs:
        - update
    - apiGroups:
        - cert-manager.io
      resources:
        - issuers
        - clusterissuers
        - certificates
        - certificaterequests
      verbs:
        - get
        - list
        - watch
        - create
        - delete
    - apiGroups:
        - experimental.cert-manager.io
      resources:
        - hardwaresecuritymodules
        - hardwaresecuritymodules/status
        - quoteattestations
        - quoteattestations/status
      verbs:
        - update
    - apiGroups:
        - experimental.cert-manager.io
      resources:
        - hardwaresecuritymodules
        - quoteattestations
      verbs:
        - get
        - list
        - watch
        - create
        - delete
    - apiGroups:
        - ""
      resources:
        - secrets
      verbs:
        - get
        - list
        - watch
        - create
        - update
        - delete
    - apiGroups:
        - ""
      resources:
        - events
      verbs:
        - create
        - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
    labels:
        app: cert-manager
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: cert-manager
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: cert-manager
        helm.sh/chart: cert-manager-v1.4.2
    name: cert-manager-controller-hsmconfig
rules:
    - apiGroups:
        - experimental.cert-manager.io
      resources:
        - hardwaresecuritymoduleconfigs
        - hardwaresecuritymoduleconfigs/status
      verbs:
        - update
    - apiGroups:
        - experimental.cert-manager.io
      resources:
        - hardwaresecuritymoduleconfigs
      verbs:
        - get
        - list
        - watch
        - create
        - delete
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
    labels:
        app: cert-manager
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: cert-manager
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: cert-manager
        helm.sh/chart: cert-manager-v1.4.2
    name: cert-manager-controller-hsm-qa
roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: cert-manager-controller-hsm-qa
subjects:
    - kind: ServiceAccount
      name: cert-manager
      namespace: cert-manager
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
    labels:
        app: cert-manager
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: cert-manager
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: cert-manager
        helm.sh/chart: cert-manager-v1.4.2
    name: cert-manager-controller-hsmconfig
roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: cert-manager-controller-hsmconfig
subjects:
    - kind: ServiceAccount
      name: cert-manager
      namespace: cert-manager
---
apiVersion: apps/v1
kind: Deployment
metadata:
    labels:
        app: cert-manager
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: cert-manager
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: cert-manager
        helm.sh/chart: cert-manager-v1.4.2
    name: cert-manager
    namespace: cert-manager
spec:
    replicas: 1
    selector:
        matchLabels:
            app.kubernetes.io/component: controller
            app.kubernetes.io/instance: cert-manager
            app.kubernetes.io/name: cert-manager
    template:
        metadata:
            annotations:
                sgx.intel.com/quote-provider: aesmd
                prometheus.io/path: /metrics
                prometheus.io/port: "9402"
                prometheus.io/scrape: "true"
            labels:
                app: cert-manager
                app.kubernetes.io/component: controller
                app.kubernetes.io/instance: cert-manager
                app.kubernetes.io/managed-by: Helm
                app.kubernetes.io/name: cert-manager
                helm.sh/chart: cert-manager-v1.4.2
        spec:
            initContainers:
            - name: init
              image: busybox
              imagePullPolicy: IfNotPresent
              # Set appropriate permissions to tokens directory.
              # The cert-manager-sgx container runs with UID 5000(cert-manager username).
              command: ["/bin/chown", "-R", "5000:5000", "/cert-manager/tokens"]
              volumeMounts:
              - mountPath: /cert-manager/tokens
                name: tokens-dir
            containers:
                - args:
                    - --v=4
                    - --cluster-resource-namespace=$(POD_NAMESPACE)
                    - --leader-election-namespace=kube-system
                    - --enable-hsm
                    - --feature-gates=ExperimentalCertificateSigningRequestControllers=true
                  env:
                    - name: POD_NAMESPACE
                      valueFrom:
                        fieldRef:
                            fieldPath: metadata.namespace
                  image: registry.fi.intel.com/staging/cert-manager-sgx:1.4.2
                  resources:
                      limits:
                          sgx.intel.com/epc: 12Mi
                      requests:
                          sgx.intel.com/epc: 12Mi
                  imagePullPolicy: IfNotPresent
                  name: cert-manager
                  ports:
                    - containerPort: 9402
                      protocol: TCP
                  securityContext:
                      runAsNonRoot: true
                  volumeMounts:
                      - mountPath: /cert-manager/tokens
                        name: tokens-dir
            serviceAccountName: cert-manager
            volumes:
                - hostPath:
                    path: /var/lib/cert-manager
                    type: DirectoryOrCreate
                  name: tokens-dir
